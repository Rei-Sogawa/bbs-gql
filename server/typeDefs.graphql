scalar DateTime

enum CommentParentName {
  topic
  comment
}

union CommentParent = Topic | Comment

#
# PAGINATE
#
type PageInfo {
  startCursor: DateTime
  endCursor: DateTime
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

input PaginateInput {
  first: Int
  after: DateTime
  last: Int
  before: DateTime
}

type TopicEdge {
  node: Topic!
  cursor: DateTime!
}

type TopicConnection {
  edges: [TopicEdge!]!
  pageInfo: PageInfo!
}

type CommentEdge {
  node: Comment!
  cursor: DateTime!
}

type CommentConnection {
  edges: [CommentEdge!]!
  pageInfo: PageInfo!
}

#
# ROOT
#
type User {
  id: ID!
  displayName: String!
  topics: [Topic!]!
}

type Topic {
  id: ID!
  title: String!
  content: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
  comments(input: PaginateInput!): CommentConnection!
}

type Comment {
  id: ID!
  content: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
  parent: CommentParent!
  comments: CommentConnection!
}

#
# QUERY
#
type Query {
  me: User!
  topic(id: ID!): Topic!
  topics(input: PaginateInput!): TopicConnection!
}

#
# MUTATION
#
input SignUpInput {
  displayName: String!
  email: String!
  password: String!
}

input CreateTopicInput {
  title: String!
  content: String!
}

input UpdateTopicInput {
  title: String!
  content: String!
}

input CreateCommentInput {
  content: String!
  parentName: CommentParentName!
  parentId: String!
}

input UpdateCommentInput {
  content: String!
}

type Mutation {
  signUp(input: SignUpInput!): User!
  createTopic(input: CreateTopicInput!): Topic!
  updateTopic(id: ID!, input: UpdateTopicInput!): Topic!
  deleteTopic(id: ID!): Topic!
  createComment(input: CreateCommentInput!): CommentEdge!
  updateComment(id: ID!, input: UpdateCommentInput!): Comment!
  deleteComment(id: ID!): CommentEdge!
}
